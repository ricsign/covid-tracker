{"version":3,"sources":["components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","reportWebVitals.js","index.js","components/Cards/Cards.module.css","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/title.jpeg"],"names":["Cards","_ref","_ref$data","data","cases","recovered","deaths","lastUpdate","todayCases","todayRecovered","todayDeaths","countryInfo","react_default","a","createElement","className","styles","container","Grid","spacing","justifyContent","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","variant","gutterBottom","color","build_default","start","end","duration","separator","deceased","src","flag","alt","iso3","width","countriesUrl","fetchGlobalData","Object","asyncToGenerator","regenerator_default","mark","_callee","_yield$axios$get","_yield$axios$get$data","updated","wrap","_context","prev","next","axios","get","sent","abrupt","Date","toLocaleDateString","t0","console","log","stop","apply","this","arguments","fetchDailyData","_ref2","_callee2","_yield$axios$get2","_yield$axios$get2$dat","_context2","fetchCountriesList","_ref3","_callee3","_yield$axios$get3","ret","_iterator","_step","obj","_context3","_createForOfIteratorHelper","s","n","done","value","push","country","err","e","f","fetchCountryData","_ref4","_callee4","_yield$axios$get4","_yield$axios$get4$dat","_context4","concat","toLowerCase","_x","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","BarController","BarElement","Chart","chosenCountry","_useState","useState","_useState2","slicedToArray","dailyData","setDailyData","useEffect","t1","getDailyData","lineChart","dist","labels","entries","flatMap","datasets","label","borderColor","backgroundColor","tension","fill","barChart","options","legend","display","titles","text","CountryPicker","handleCountryChange","countriesList","setCountriesList","getCountryList","FormControl","formControl","NativeSelect","defaultValue","onChange","target","map","countr","i","key","App","setData","_useState3","_useState4","setChosenCountry","getGlobalData","t2","t3","titleImage","components_Cards_Cards","components_CountryPicker_CountryPicker","components_Chart_Chart","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App","module","exports","p"],"mappings":"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","file":"static/js/main.4b82eb95.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Card, CardContent, Typography, Grid} from '@mui/material';\nimport CountUp from 'react-countup';\nimport styles from './Cards.module.css';\nimport cx from 'classnames';\n\nconst Cards = ({data: {cases, recovered, deaths, lastUpdate, todayCases, todayRecovered, todayDeaths, countryInfo}}) => {\n    // In case there is no data given, print loading\n    if(!cases) return \"Loading Data...\";\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justifyContent=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography variant=\"subtitle1\" gutterBottom>Confirmed Cases</Typography>\n                        <Typography variant=\"h5\" color=\"blue\">\n                            <CountUp start={0} end={cases} duration={3} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"blue\" gutterBottom>\n                            +<CountUp start={0} end={todayCases} duration={3} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\" >{lastUpdate}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography variant=\"subtitle1\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\" color=\"green\">\n                            <CountUp start={0} end={recovered} duration={3} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"green\" gutterBottom>\n                            +<CountUp start={0} end={todayRecovered} duration={3} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{lastUpdate}</Typography>\n                        <Typography variant=\"body2\">Number of recovered cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deceased)}>\n                    <CardContent>\n                        <Typography variant=\"subtitle1\" gutterBottom>Deceased</Typography>\n                        <Typography variant=\"h5\" color=\"red\">\n                            <CountUp start={0} end={deaths} duration={3} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"red\" gutterBottom>\n                            +<CountUp start={0} end={todayDeaths} duration={3} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{lastUpdate}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n            {countryInfo && <img src={countryInfo.flag} alt={countryInfo.iso3} className={styles.flag} width=\"300px\" />}\n        </div>\n    );\n}\n\nexport default Cards;","import axios from 'axios';\n\n// const requestUrl = 'https://covid19.mathdro.id/api';\nconst globalUrl = \"https://disease.sh/v3/covid-19/all\"; // for cards\nconst countriesUrl = \"https://disease.sh/v3/covid-19/countries\"; // for bar graph and table\nconst dailyUrl = \"https://disease.sh/v3/covid-19/historical/all?lastdays=all\" // for line graph\n\n// fetch global data\nexport const fetchGlobalData = async () => {\n    try {\n        const {data : {cases, recovered, deaths, updated, todayCases, todayRecovered, todayDeaths}} = await axios.get(globalUrl);\n        return {cases, recovered, deaths, lastUpdate: new Date(updated).toLocaleDateString(), todayCases, todayRecovered, todayDeaths};\n    } catch (e) {\n        console.log(e);\n    }\n};\n\n// fetch daily data\nexport const fetchDailyData = async () => {\n    try{\n        const {data : {cases, recovered, deaths}} = await axios.get(dailyUrl);\n        return {cases, recovered, deaths};\n    } catch (e) {\n        console.log(e);\n    }\n}\n\n// fetch list of countries\nexport const fetchCountriesList = async () => {\n    try{\n        const {data} = await axios.get(countriesUrl);\n        const ret = [];\n        for(const obj of data){\n            ret.push({country : obj.country, iso3: obj.countryInfo.iso3, flag: obj.countryInfo.flag});\n        }\n        return ret;\n    } catch (e) {\n        console.log(e);\n    }\n}\n\n// fetch a specific country's data\nexport const fetchCountryData = async (country) => {\n    try{\n        const {data : {cases, recovered, deaths, updated, countryInfo, todayCases, todayRecovered, todayDeaths}} = await axios.get(`${countriesUrl}/${country.toLowerCase()}`);\n        return {cases, recovered, deaths, lastUpdate: new Date(updated).toLocaleDateString(), todayCases, todayRecovered, todayDeaths, countryInfo};\n    } catch (e) {\n        console.log(e);\n    }\n}","import React, {useState, useEffect} from 'react';\n\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\nimport {Line, Bar} from 'react-chartjs-2';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n    Filler,\n    BarController,\n    BarElement\n} from 'chart.js';\n    \n// Must register ChartJS components\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n    Filler,\n    BarController,\n    BarElement\n);\n\nconst Chart = ({data, chosenCountry}) => {\n    const [dailyData, setDailyData] = useState({});\n\n    // When chart mounted, fetch daily data from api (default global)\n    useEffect(() => {\n        const getDailyData = async () => {\n            setDailyData(await fetchDailyData());\n        };\n\n        getDailyData();\n        \n    }, [])\n\n    const lineChart = (\n        dailyData.cases ? <Line\n            data = {{\n                labels: Object.entries(dailyData.cases).flatMap(a => a[0]), // a[0]: date\n                datasets: [{\n                    data: Object.entries(dailyData.cases).flatMap(a => a[1]), // a[1]: number of people\n                    label: \"Confirmed\",\n                    borderColor: \"#3333ff\",\n                    backgroundColor: 'rgba(0, 0, 255, 0.1)',\n                    tension: 0.3,\n                    fill: true\n                },{\n                    data: Object.entries(dailyData.recovered).flatMap(a => (a[1] ? a[1] : 130899061)), // a[1]: number of people\n                    label: \"Recovered\",\n                    borderColor: \"green\",\n                    backgroundColor: 'rgba(0, 255, 0, 0.3)',\n                    tension: 0.5,\n                    fill: true\n                },{\n                    data: Object.entries(dailyData.deaths).flatMap(a => a[1]), // a[1]: number of people\n                    label: \"Deceased\",\n                    borderColor: \"red\",\n                    backgroundColor: 'rgba(255, 0, 0, 0.3)',\n                    tension: 0.3,\n                    fill: true\n                }],\n            }}\n        /> : null\n    );\n\n    const barChart = (\n        data.cases ? \n        (\n            <Bar \n                data = {{\n                    labels: ['Confirmed', 'Recovered', 'Deceased'],\n                    datasets: [{\n                        label: 'Number of People',\n                        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                        data: [data.cases, data.recovered, data.deaths]\n                    }]\n                }}\n                options = {{\n                    legend: {display: false},\n                    titles: {display: true, text: `Current Report in ${chosenCountry}`},\n                }}\n            />\n        ) : null\n    );\n\n    // if(dailyData.cases) console.log(Object.entries(dailyData.cases).flatMap(a => a[1]));\n    return (\n        <div className={styles.container}>\n            {chosenCountry ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\n\nimport { fetchCountriesList } from '../../api';\nimport { NativeSelect, FormControl } from '@mui/material';\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const [countriesList, setCountriesList] = useState([]);\n\n    // When mounted picker, fetch the list of countries\n    useEffect(() => {\n        const getCountryList = async () => {\n            setCountriesList(await fetchCountriesList());\n        }\n\n        getCountryList();\n    },[]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {countriesList.map((countr, i) => <option key={i} value={countr.country}>{countr.country} ({countr.iso3})</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\nimport {useState, useEffect} from 'react';\n\nimport styles from './App.module.css';\nimport {Cards, Chart, CountryPicker} from './components';\nimport {fetchGlobalData, fetchCountryData} from './api';\nimport titleImage from './images/title.jpeg';\n\nfunction App() {\n  let [data, setData] = useState({});\n  let [chosenCountry, setChosenCountry] = useState('');\n\n  // When mounting app, fetch global data from api\n  useEffect(()=>{\n    const getGlobalData = async () => {\n      // After getting the data, store in state to pass to props\n      setData(await fetchGlobalData());\n    };\n\n    getGlobalData();\n\n  },[]);\n\n  // Callback function as prop to handle changing chosen country\n  const handleCountryChange = async (country) => {\n    // Fetch data from api and change the state\n    if(!country) setData(await fetchGlobalData()); // If global is selected, we fetch global data instead\n    else setData(await fetchCountryData(country));\n    setChosenCountry(country);\n  }\n\n  return (\n    <div className={styles.container}>\n      <img src={titleImage} alt=\"Covid Tracker Logo\" className={styles.titleImage}/>\n      <Cards data={data} />\n      <CountryPicker handleCountryChange={handleCountryChange} />\n      <Chart data={data} chosenCountry={chosenCountry} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1uena\",\"card\":\"Cards_card__32UsK\",\"infected\":\"Cards_infected__t6J17\",\"recovered\":\"Cards_recovered__1Vh1K\",\"deceased\":\"Cards_deceased__MaHZf\",\"flag\":\"Cards_flag__Kaxoa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__tsffF\",\"titleImage\":\"App_titleImage__1z1FY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2Bzct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1vqy5\"};","module.exports = __webpack_public_path__ + \"static/media/title.55647843.jpeg\";"],"sourceRoot":""}